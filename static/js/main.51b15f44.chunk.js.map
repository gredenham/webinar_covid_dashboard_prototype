{"version":3,"sources":["store/store-types.ts","store/actions.ts","store/index.ts","components/country-map/country-map.tsx","components/charts/use-country-covid.tsx","components/loader/loader.tsx","components/charts/charts.tsx","components/list/list.tsx","pages/main/main.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AppActions","setActiveCountry","payload","dispatch","type","SET_ACTIVE_COUNTRY","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","AppStore","createStore","state","action","SET_COUNTRIES","isCountriesLoaded","countries","selectedCountry","SET_COUNTRY_COVID_DATA","countryCovidData","applyMiddleware","thunk","features","geoJson","CountryMap","useDispatch","populationMap","useSelector","reduce","acc","cur","alpha3Code","population","className","MapContainer","style","height","width","center","zoom","TileLayer","url","GeoJSON","data","onEachFeature","feature","layer","name","properties","ISO_A3","setStyle","fillColor","bindTooltip","on","click","setCountry","mouseover","event","mouseout","useCountryCovid","countryName","useState","isLoading","setLoading","useEffect","fetch","then","responce","a","json","loadCountryCovidData","Loader","Charts","dataWithDates","map","date","Date","props","dataSource","argumentField","visible","valueField","allowDecimals","CountryList","ref","useRef","selectedIndex","findIndex","current","scrollTo","top","flag","background","onClick","src","alt","MainPage","App","connect","loadCountries","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.51b15f44.chunk.js","sourcesContent":["export interface IAppState {\n    countries: Country[];\n    isCountriesLoaded: boolean;\n    selectedCountry?: string;\n    countryCovidData: CountryCovidItem[];\n}\n\nexport enum AppActions {\n    SET_COUNTRIES = 'SET_COUNTRIES',\n    SET_ACTIVE_COUNTRY = 'SET_ACTIVE_COUNTRY',\n    SET_COUNTRY_COVID_DATA = 'SET_COUNTRY_COVID_DATA',\n}\n\nexport interface Country {\n    population: number;\n    flag: string;\n    name: string;\n    alpha3Code: string;\n}\n\nexport interface CountryCovidItem {\n    Country: string; /** {@link Country.name} */\n    CountryCode: string;\n    Province: string;\n    City: string;\n    CityCode: string;\n    Lat: string;\n    Lon: string;\n    Confirmed: number;\n    Deaths: number;\n    Recovered: number;\n    Active: number;\n    Date: string\n}\n","import {Dispatch} from \"redux\";\nimport {AppActions} from \"./index\";\n\nexport const setActiveCountry = (payload: string) => (dispatch: Dispatch) => {\n    dispatch({type: AppActions.SET_ACTIVE_COUNTRY , payload})\n};\n\nexport const loadCountries = () => (dispatch: Dispatch) => {\n    fetch('https://restcountries.eu/rest/v2/all?fields=name;population;flag;alpha3Code')\n        .then(async responce => {\n            dispatch({ type: AppActions.SET_COUNTRIES, payload: await responce.json() })\n        });\n};\n\nexport const loadCountryCovidData = (countryName: string) => (dispatch: Dispatch) => {\n    return fetch(`https://api.covid19api.com/country/${countryName}`)\n        .then(async responce => {\n            dispatch({ type: AppActions.SET_COUNTRY_COVID_DATA, payload: await responce.json() });\n        });\n};\n","import {AnyAction, applyMiddleware, createStore, compose} from 'redux';\nimport thunk from \"redux-thunk\";\nimport {AppActions, IAppState} from \"./store-types\";\n\nconst defaultState: IAppState = {\n    isCountriesLoaded: false,\n    countries: [],\n    countryCovidData: [],\n}\n\nfunction counterReducer(state: IAppState, action: AnyAction): IAppState {\n    const {payload, type} = action;\n    switch (type) {\n        case AppActions.SET_COUNTRIES:\n            return {\n                ...state,\n                isCountriesLoaded: true,\n                countries: payload,\n            };\n        case AppActions.SET_ACTIVE_COUNTRY:\n            return {\n                ...state,\n                selectedCountry: payload,\n            }\n        case AppActions.SET_COUNTRY_COVID_DATA:\n            return {\n                ...state,\n                countryCovidData: payload,\n            }\n        default:\n            return state\n    }\n}\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport const AppStore = createStore(\n    counterReducer as any,\n    defaultState,\n    composeEnhancers(\n        applyMiddleware(thunk)\n    )\n);\n\nexport * from './actions';\nexport * from './store-types';\n\n","import * as React from 'react';\nimport {MapContainer, GeoJSON, TileLayer} from \"react-leaflet\";\n\nimport 'leaflet/dist/leaflet.css';\nimport './country-map.css';\n\nimport geoJson from './countries.json';\nimport {Layer} from \"leaflet\";\nimport {IAppState, setActiveCountry} from \"../../store\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\n\ninterface IGeoFeature {\n    type: string;\n    properties: {\n        ADMIN: string;\n        ISO_A3: string;\n        ISO_A2: string;\n    }\n    geometry: {\n        coordinates: number[];\n        type: string;\n    }\n}\n\nconst features: IGeoFeature = (geoJson as any).features;\n\nexport const CountryMap = () => {\n    const dispatch = useDispatch();\n    const setCountry = (name: string) => dispatch(setActiveCountry(name));\n    const countries = useSelector((state: IAppState) => state.countries);\n    const populationMap: {[key: string]: number} = countries.reduce((acc, cur) => ({\n        ...acc,\n        [cur.alpha3Code]: cur.population,\n    }), {});\n\n    return (\n        <div className=\"map-container\" >\n            <MapContainer\n                style={{ height: '100%', width: '100%' }}\n                center={[0, 0]}\n                zoom={1}\n            >\n                <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\n                <GeoJSON\n                    data={features as any}\n                    onEachFeature={(feature, layer: Layer) => {\n                        const name = feature.properties.ISO_A3;\n                        (layer as any).setStyle({\n                            fillColor: 'green',\n                        });\n                        layer.bindTooltip(() => `${name} ${populationMap[name]}`);\n\n                        layer.on({\n                            click: () => {\n                                setCountry(name);\n                            },\n                            mouseover: (event) => {\n                                (layer as any).setStyle({\n                                    fillColor: 'red',\n                                });\n                            },\n                            mouseout: () => {\n                                (layer as any).setStyle({\n                                    fillColor: 'green',\n                                });\n                            }\n                        })\n                    }}\n                />\n            </MapContainer>\n        </div>\n    );\n};\n","import {useEffect, useState} from \"react\";\nimport {loadCountryCovidData} from \"@store\";\nimport {useDispatch} from \"react-redux\";\n\nexport const useCountryCovid = (countryName: string) => {\n    const [isLoading, setLoading] = useState(true);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        setLoading(true);\n        if (!countryName) {\n            return;\n        }\n        (dispatch(loadCountryCovidData(countryName)) as unknown as Promise<void>)\n            .then(() => setLoading(false))\n    }, [countryName, dispatch]);\n\n    return [isLoading];\n}\n","import * as React from 'react';\n\nexport const Loader = () => {\n    return (\n        <div>Loading...</div>\n    );\n};\n","import * as React from 'react';\n\nimport Chart, {\n    ArgumentAxis,\n    Series,\n    CommonSeriesSettings,\n    CommonAxisSettings,\n    Grid,\n    Format,\n    Label,\n    ValueAxis,\n} from 'devextreme-react/chart';\nimport {useCountryCovid} from \"./use-country-covid\";\nimport {useSelector} from \"react-redux\";\nimport {IAppState} from \"../../store\";\nimport {Loader} from \"../loader\";\n\nexport const Charts = () => {\n    const selectedCountry = useSelector((state: IAppState) => state.selectedCountry);\n    const countryCovidData = useSelector((state: IAppState) => state.countryCovidData);\n    const dataWithDates = countryCovidData.map(({Date: date, ...props}) => ({\n        ...props,\n        Date: new Date(date),\n    }));\n    const [isLoading] = useCountryCovid(selectedCountry as string);\n\n    if (!selectedCountry) {\n        return (\n            <div>Страна не выбрана!</div>\n        );\n    }\n\n    if (isLoading) {\n        return <Loader />;\n    }\n\n    return (\n        <Chart\n            dataSource={dataWithDates}\n        >\n            <CommonSeriesSettings\n                argumentField=\"Date\"\n                type=\"spline\"\n            />\n            <CommonAxisSettings>\n                <Grid visible={true} />\n            </CommonAxisSettings>\n            <Series valueField=\"Confirmed\" name=\"Confirmed\" />\n            <Series valueField=\"Recovered\" name=\"Recovered\" />\n            <Series valueField=\"Deaths\" name=\"Deaths\" />\n            <Series valueField=\"Active\" name=\"Active\" />\n            <ArgumentAxis>\n                <Label>\n                    <Format type=\"shortDate\" />\n                </Label>\n            </ArgumentAxis>\n\n            <ValueAxis\n                allowDecimals\n            >\n                <Label>\n                    <Format type=\"decimal\" />\n                </Label>\n            </ValueAxis>\n        </Chart>\n    )\n};\n","import * as React from 'react';\n\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {IAppState, setActiveCountry} from \"../../store\";\nimport './list.css';\nimport {useRef} from \"react\";\n\nconst ROW_HEIGHT = 50;\n\nexport const CountryList = () => {\n    const ref = useRef(null);\n    const countries = useSelector((state: IAppState) => state.countries);\n    const selectedCountry = useSelector((state: IAppState) => state.selectedCountry);\n    const dispatch = useDispatch();\n    const setCountry = (name: string) => dispatch(setActiveCountry(name));\n    const selectedIndex = countries.findIndex(({alpha3Code}) => alpha3Code === selectedCountry);\n\n    if (selectedIndex > -1 && ref.current) {\n        (ref.current as unknown as HTMLElement).scrollTo({\n            top: selectedIndex * ROW_HEIGHT,\n        });\n    }\n\n    return (\n        <div className=\"country-list\" ref={ref} >\n            {\n                countries.map(({name, flag, population, alpha3Code}) => (\n                    <div\n                        className=\"country-row\"\n                        key={name}\n                        style={{background: selectedCountry === alpha3Code ? 'lightgrey' : 'none', height: ROW_HEIGHT}}\n                        onClick={() => setCountry(alpha3Code)}\n                    >\n                        <img src={flag} alt={selectedCountry} />\n                        <div>{name}</div>\n                        <div>{population}</div>\n                    </div>\n                ))\n            }\n        </div>\n    )\n};\n","import * as React from 'react';\nimport {\n    CountryList,\n    CountryMap,\n    Charts,\n} from \"@components\";\n\nexport const MainPage = () => {\n    return (\n        <>\n            <h1>COVID DASHBOARD</h1>\n            <Charts />\n            <CountryList />\n            <CountryMap />\n        </>\n    )\n}\n","import React, {useEffect} from 'react';\nimport {MainPage} from \"@pages\";\nimport {connect} from 'react-redux';\nimport {IAppState, loadCountries} from './store';\nimport {Loader} from \"./components/loader\";\n\nimport './App.css';\nimport 'devextreme/dist/css/dx.common.css';\nimport 'devextreme/dist/css/dx.light.css';\n\ninterface IAppComponentProps {\n    isCountriesLoaded: boolean;\n    loadCountries: () => void;\n}\n\nfunction AppComponent({isCountriesLoaded, loadCountries}: IAppComponentProps) {\n  useEffect(() => {\n      if (!isCountriesLoaded) {\n        loadCountries();\n      }\n  }, [isCountriesLoaded, loadCountries]);\n\n  return (\n      isCountriesLoaded\n        ? <MainPage />\n        : <Loader />\n  );\n}\n\nconst mapStateToProps = (state: IAppState) => ({\n  isCountriesLoaded: state.isCountriesLoaded\n});\n\nconst mapDispatchToProps = (dispatch: any) => ({\n    loadCountries: () => dispatch(loadCountries())\n});\n\nexport const App = connect(mapStateToProps, mapDispatchToProps)(AppComponent);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {AppStore} from \"./store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={AppStore}>\n          { /** @ts-ignore */ }\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}